let playerClass = "";
let playerHP = 100;
let enemyHP = 100;
let isDefending = false;

function selectClass(chosenClass) {
  playerClass = chosenClass;
  playerHP = 100;
  enemyHP = 100;
  isDefending = false;
  showSection("actions");
  document.getElementById("class-title").textContent = `–ö–ª–∞—Å—Å: ${playerClass}`;
  updateHP();
  log(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–ª–∞—Å—Å: ${playerClass}`);
  saveProgress();
}

function attack() {
  const damage = getRandom(15, 25);
  enemyHP -= damage;
  log(`–í—ã –Ω–∞–Ω–µ—Å–ª–∏ ${damage} —É—Ä–æ–Ω–∞ –≤—Ä–∞–≥—É.`);
  checkBattleEnd();
  if (enemyHP > 0) enemyAttack();
  updateHP();
  saveProgress();
}

function defend() {
  isDefending = true;
  log("–í—ã –≤—Å—Ç–∞–ª–∏ –≤ –∑–∞—â–∏—Ç—É. –£—Ä–æ–Ω –ø–æ –≤–∞–º –±—É–¥–µ—Ç —É–º–µ–Ω—å—à–µ–Ω.");
  enemyAttack();
  updateHP();
  saveProgress();
}

function enemyAttack() {
  let damage = getRandom(10, 20);
  if (isDefending) {
    damage = Math.floor(damage / 2);
    isDefending = false;
  }
  playerHP -= damage;
  logAppend(`–í—Ä–∞–≥ –∞—Ç–∞–∫—É–µ—Ç –∏ –Ω–∞–Ω–æ—Å–∏—Ç ${damage} —É—Ä–æ–Ω–∞ –≤–∞–º.`);
  checkBattleEnd();
}

function showStatus() {
  const statusText = `–ö–ª–∞—Å—Å: ${playerClass}, –í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ: ${playerHP}, –ó–¥–æ—Ä–æ–≤—å–µ –≤—Ä–∞–≥–∞: ${enemyHP}`;
  if (document.getElementById("city").style.display === "block") {
    document.getElementById("city-log").textContent = statusText;
  } else {
    log(statusText);
  }
}

function updateHP() {
  document.getElementById("player-hp").textContent = Math.max(playerHP, 0);
  document.getElementById("enemy-hp").textContent = Math.max(enemyHP, 0);
}

function checkBattleEnd() {
  if (playerHP <= 0) {
    log("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! ü™¶");
    disableButtons();
  } else if (enemyHP <= 0) {
    log("–í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤—Ä–∞–≥–∞! üéâ");
    setTimeout(goToCity, 1500); // –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–æ—Ä–æ–¥ —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã
  }
}

function disableButtons() {
  const buttons = document.querySelectorAll("#actions button");
  buttons.forEach(btn => btn.disabled = true);
}

function log(text) {
  document.getElementById("log").textContent = text;
}

function logAppend(text) {
  const current = document.getElementById("log").textContent;
  document.getElementById("log").textContent = current + "\n" + text;
}

function getRandom(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

// –ì–æ—Ä–æ–¥
function goToCity() {
  showSection("city");
  document.getElementById("city-log").textContent = "–í—ã –ø—Ä–∏–±—ã–ª–∏ –≤ –≥–æ—Ä–æ–¥.";
}

function rest() {
  playerHP = 100;
  updateHP();
  document.getElementById("city-log").textContent = "–í—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –≤ —Ç–∞–≤–µ—Ä–Ω–µ.";
  saveProgress();
}

function goToBattle() {
  enemyHP = 100;
  isDefending = false;
  updateHP();
  log("–í—ã –≤—ã—à–ª–∏ –Ω–∞ –Ω–æ–≤—ã–π –±–æ–π!");
  enableButtons();
  showSection("actions");
  saveProgress();
}

function enableButtons() {
  const buttons = document.querySelectorAll("#actions button");
  buttons.forEach(btn => btn.disabled = false);
}

// –°–∫—Ä—ã—Ç—å/–ø–æ–∫–∞–∑–∞—Ç—å –Ω—É–∂–Ω—É—é —á–∞—Å—Ç—å
function showSection(id) {
  document.getElementById("class-selection").style.display = "none";
  document.getElementById("actions").style.display = "none";
  document.getElementById("city").style.display = "none";
  document.getElementById(id).style.display = "block";
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
function saveProgress() {
  const data = {
    playerClass,
    playerHP,
    enemyHP,
    isDefending
  };
  localStorage.setItem("rpgSave", JSON.stringify(data));
}

// –ó–∞–≥—Ä—É–∑–∫–∞
function loadProgress() {
  const data = JSON.parse(localStorage.getItem("rpgSave"));
  if (data && data.playerClass) {
    playerClass = data.playerClass;
    playerHP = data.playerHP;
    enemyHP = data.enemyHP;
    isDefending = data.isDefending;
    if (enemyHP <= 0) {
      goToCity();
    } else {
      showSection("actions");
      document.getElementById("class-title").textContent = `–ö–ª–∞—Å—Å: ${playerClass}`;
      updateHP();
      log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ. –í—ã ‚Äî ${playerClass}`);
      checkBattleEnd();
    }
  }
}

window.onload = loadProgress;

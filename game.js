let playerClass = "";
let playerHP = 100;
let enemyHP = 100;
let isDefending = false;

// –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞
function selectClass(chosenClass) {
  playerClass = chosenClass;
  playerHP = 100;
  enemyHP = 100;
  isDefending = false;

  document.getElementById("class-selection").style.display = "none";
  document.getElementById("actions").style.display = "block";
  document.getElementById("city").style.display = "none";

  document.getElementById("class-title").textContent = `–ö–ª–∞—Å—Å: ${playerClass}`;
  updateHP();
  log(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–ª–∞—Å—Å: ${playerClass}`);
  saveProgress();
}

// –ê—Ç–∞–∫–∞ –∏–≥—Ä–æ–∫–∞
function attack() {
  console.log("–ê—Ç–∞–∫–∞ –Ω–∞–∂–∞—Ç–∞");
  const damage = getRandom(15, 25);
  enemyHP -= damage;
  log(`–í—ã –Ω–∞–Ω–µ—Å–ª–∏ ${damage} —É—Ä–æ–Ω–∞ –≤—Ä–∞–≥—É.`);
  updateHP();
  checkBattleEnd();
  if (enemyHP > 0) {
    enemyAttack();
  }
  updateHP();
  saveProgress();
}

// –ó–∞—â–∏—Ç–∞ –∏–≥—Ä–æ–∫–∞
function defend() {
  isDefending = true;
  log("–í—ã –≤—Å—Ç–∞–ª–∏ –≤ –∑–∞—â–∏—Ç—É. –£—Ä–æ–Ω –ø–æ –≤–∞–º –±—É–¥–µ—Ç —É–º–µ–Ω—å—à–µ–Ω.");
  enemyAttack();
  updateHP();
  saveProgress();
}

// –ê—Ç–∞–∫–∞ –≤—Ä–∞–≥–∞
function enemyAttack() {
  let damage = getRandom(10, 20);
  if (isDefending) {
    damage = Math.floor(damage / 2);
    isDefending = false;
  }
  playerHP -= damage;
  logAppend(`–í—Ä–∞–≥ –∞—Ç–∞–∫—É–µ—Ç –∏ –Ω–∞–Ω–æ—Å–∏—Ç ${damage} —É—Ä–æ–Ω–∞ –≤–∞–º.`);
  checkBattleEnd();
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
function showStatus() {
  log(`–ö–ª–∞—Å—Å: ${playerClass}, –í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ: ${playerHP}, –ó–¥–æ—Ä–æ–≤—å–µ –≤—Ä–∞–≥–∞: ${enemyHP}`);
}

// –û–±–Ω–æ–≤–∏—Ç—å HP –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
function updateHP() {
  document.getElementById("player-hp").textContent = Math.max(playerHP, 0);
  document.getElementById("enemy-hp").textContent = Math.max(enemyHP, 0);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ü–∞ –±–æ—è
function checkBattleEnd() {
  if (playerHP <= 0) {
    log("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! ü™¶");
    disableButtons();
  } else if (enemyHP <= 0) {
    log("–í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤—Ä–∞–≥–∞! üéâ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–æ—Ä–æ–¥...");
    disableButtons();
    setTimeout(goToCity, 1500);
  }
}

// –û—Ç–∫–ª—é—á–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –±–æ—è
function disableButtons() {
  const buttons = document.querySelectorAll("#actions button");
  buttons.forEach(btn => btn.disabled = true);
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (–∑–∞–º–µ–Ω–∞)
function log(text) {
  document.getElementById("log").textContent = text;
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ)
function logAppend(text) {
  const current = document.getElementById("log").textContent;
  document.getElementById("log").textContent = current + "\n" + text;
}

// –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç min –¥–æ max
function getRandom(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

// –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–æ—Ä–æ–¥
function goToCity() {
  console.log("–ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–æ—Ä–æ–¥");
  document.getElementById("actions").style.display = "none";
  document.getElementById("city").style.display = "block";
  document.getElementById("log").textContent = "";
  document.getElementById("city-log").textContent = "–í—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.";
}

// –î–µ–π—Å—Ç–≤–∏—è –≤ –≥–æ—Ä–æ–¥–µ
function rest() {
  playerHP = 100;
  updateHP();
  document.getElementById("city-log").textContent = "–í—ã –æ—Ç–¥–æ—Ö–Ω—É–ª–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ!";
  saveProgress();
}

function shop() {
  document.getElementById("city-log").textContent = "–ú–∞–≥–∞–∑–∏–Ω –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...";
}

function startQuest() {
  // –°–±—Ä–æ—Å–∏—Ç—å –≤—Ä–∞–≥–∞ –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—é
  enemyHP = 100;
  playerHP = playerHP > 0 ? playerHP : 100;
  isDefending = false;

  document.getElementById("city").style.display = "none";
  document.getElementById("actions").style.display = "block";
  updateHP();
  log("–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å! –ë–æ–π –Ω–∞—á–∞–ª—Å—è.");
  const buttons = document.querySelectorAll("#actions button");
  buttons.forEach(btn => btn.disabled = false);
  saveProgress();
}

// –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫–ª–∞—Å—Å–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
function restart() {
  document.getElementById("city").style.display = "none";
  document.getElementById("actions").style.display = "none";
  document.getElementById("class-selection").style.display = "block";
  const buttons = document.querySelectorAll("#actions button");
  buttons.forEach(btn => btn.disabled = false);
  playerClass = "";
  playerHP = 100;
  enemyHP = 100;
  isDefending = false;
  log("");
  updateHP();
  localStorage.removeItem("rpgSave");
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function saveProgress() {
  const data = {
    playerClass,
    playerHP,
    enemyHP,
    isDefending
  };
  localStorage.setItem("rpgSave", JSON.stringify(data));
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function loadProgress() {
  const data = JSON.parse(localStorage.getItem("rpgSave"));
  if (data && data.playerClass) {
    playerClass = data.playerClass;
    playerHP = data.playerHP;
    enemyHP = data.enemyHP;
    isDefending = data.isDefending;

    document.getElementById("class-selection").style.display = "none";
    document.getElementById("actions").style.display = "block";
    document.getElementById("city").style.display = "none";

    document.getElementById("class-title").textContent = `–ö–ª–∞—Å—Å: ${playerClass}`;
    updateHP();
    log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ. –í—ã ‚Äî ${playerClass}`);
    checkBattleEnd();
  }
}

window.onload = function () {
  console.log("–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
  loadProgress();
};